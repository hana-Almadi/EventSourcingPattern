// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using account_event_sourcing;

namespace account_event_sourcing.Migrations
{
    [DbContext(typeof(AccountDbContext))]
    partial class AccountDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("account_event_sourcing.Domain.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AccountAggergateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("DateTime");

                    b.Property<int>("Money")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountAggergateId");

                    b.ToTable("ACCOUNT", "BANK");
                });

            modelBuilder.Entity("account_event_sourcing.Domain.AccountAggergate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("OwnerID")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("OwnerPhone")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.ToTable("AccountAggergate", "BANK");
                });

            modelBuilder.Entity("account_event_sourcing.Domain.Event.DomainEvent", b =>
                {
                    b.Property<long>("SequenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AccountAggergateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventJson")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("SequenceId");

                    b.HasIndex("AccountAggergateId");

                    b.ToTable("DomainEvent", "EVENTSOURCING");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DomainEvent");
                });

            modelBuilder.Entity("account_event_sourcing.Domain.Event.AccountCreateEvent", b =>
                {
                    b.HasBaseType("account_event_sourcing.Domain.Event.DomainEvent");

                    b.HasDiscriminator().HasValue("AccountCreateEvent");
                });

            modelBuilder.Entity("account_event_sourcing.Domain.Event.AccountDepositEvent", b =>
                {
                    b.HasBaseType("account_event_sourcing.Domain.Event.DomainEvent");

                    b.HasDiscriminator().HasValue("AccountDepositEvent");
                });

            modelBuilder.Entity("account_event_sourcing.Domain.Event.AccountTransferEvent", b =>
                {
                    b.HasBaseType("account_event_sourcing.Domain.Event.DomainEvent");

                    b.HasDiscriminator().HasValue("AccountTransferEvent");
                });

            modelBuilder.Entity("account_event_sourcing.Domain.Account", b =>
                {
                    b.HasOne("account_event_sourcing.Domain.AccountAggergate", "AccountAggergate")
                        .WithMany("AccountList")
                        .HasForeignKey("AccountAggergateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountAggergate");
                });

            modelBuilder.Entity("account_event_sourcing.Domain.Event.DomainEvent", b =>
                {
                    b.HasOne("account_event_sourcing.Domain.AccountAggergate", "AccountAggergate")
                        .WithMany("DomainEvent")
                        .HasForeignKey("AccountAggergateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountAggergate");
                });

            modelBuilder.Entity("account_event_sourcing.Domain.AccountAggergate", b =>
                {
                    b.Navigation("AccountList");

                    b.Navigation("DomainEvent");
                });
#pragma warning restore 612, 618
        }
    }
}
